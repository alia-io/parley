"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultConfigResolver = exports.tsConfigName = exports.testPattern = void 0;
const core_1 = require("@angular-devkit/core");
const default_config_1 = require("./jest-config/default-config");
const lodash_1 = require("lodash");
exports.testPattern = `/**/*(*.)@(spec|test).[tj]s?(x)`;
exports.tsConfigName = 'tsconfig.spec.json';
const globalMocks = {
    getComputedStyle: 'computed-style.js',
    doctype: 'doctype.js',
    matchMedia: 'match-media.js',
    styleTransform: 'style-transform.js',
};
const getMockFiles = (enabledMocks = []) => Object.values(lodash_1.pick(globalMocks, enabledMocks)).map(fileName => core_1.getSystemPath(core_1.normalize(`${__dirname}/global-mocks/${fileName}`)));
class DefaultConfigResolver {
    constructor(options) {
        this.options = options;
    }
    resolveGlobal() {
        const setupFilesAfterEnv = [
            ...default_config_1.default.setupFilesAfterEnv,
            ...getMockFiles(this.options.globalMocks),
        ];
        return Object.assign(Object.assign({}, default_config_1.default), { setupFilesAfterEnv });
    }
    resolveForProject(projectRoot) {
        return {
            globals: {
                'ts-jest': {
                    // Join with the default `tsConfigName` if the `tsConfig` option
                    // is not provided
                    tsconfig: core_1.getSystemPath(core_1.join(projectRoot, this.options.tsConfig || exports.tsConfigName)),
                },
            },
            testMatch: [`${core_1.getSystemPath(projectRoot)}${exports.testPattern}`],
        };
    }
}
exports.DefaultConfigResolver = DefaultConfigResolver;
//# sourceMappingURL=default-config.resolver.js.map