"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JestConfigurationBuilder = exports.buildConfiguration = void 0;
const core_1 = require("@angular-devkit/core");
const lodash_1 = require("lodash");
/**
 * A whitelist of property names that are meant to be concat.
 */
const ARRAY_PROPERTIES_TO_CONCAT = [
    // From Jest Config
    'setupFilesAfterEnv',
    // From ts-jest config
    'astTransformers',
];
/**
 * This function checks witch properties should be concat. Early return will
 * merge the data as lodash#merge would do it.
 */
function concatArrayProperties(objValue, srcValue, property) {
    if (!ARRAY_PROPERTIES_TO_CONCAT.includes(property)) {
        return;
    }
    if (!lodash_1.isArray(objValue)) {
        return lodash_1.mergeWith(objValue, srcValue, (obj, src) => {
            if (lodash_1.isArray(obj)) {
                return obj.concat(src);
            }
        });
    }
    return objValue.concat(srcValue);
}
const buildConfiguration = (defaultConfigResolver, customConfigResolver) => (projectRoot, workspaceRoot, configPath = 'jest.config.js') => {
    const globalDefaultConfig = defaultConfigResolver.resolveGlobal();
    const projectDefaultConfig = defaultConfigResolver.resolveForProject(projectRoot);
    const globalCustomConfig = customConfigResolver.resolveGlobal(workspaceRoot);
    const projectCustomConfig = customConfigResolver.resolveForProject(projectRoot, configPath);
    return lodash_1.mergeWith(globalDefaultConfig, projectDefaultConfig, globalCustomConfig, projectCustomConfig, concatArrayProperties);
};
exports.buildConfiguration = buildConfiguration;
class JestConfigurationBuilder {
    constructor(defaultConfigResolver, customConfigResolver) {
        this.defaultConfigResolver = defaultConfigResolver;
        this.customConfigResolver = customConfigResolver;
    }
    buildConfiguration(projectRoot, workspaceRoot, configPath = 'jest.config.js') {
        const pathToProject = core_1.resolve(workspaceRoot, projectRoot);
        return exports.buildConfiguration(this.defaultConfigResolver, this.customConfigResolver)(pathToProject, workspaceRoot, configPath);
    }
}
exports.JestConfigurationBuilder = JestConfigurationBuilder;
//# sourceMappingURL=jest-configuration-builder.js.map